****************
* Project 1 warmup
* Summer CS221-1
* 5/11/18
* Melodee Haney
**************** 

OVERVIEW:
 This program reads a file of a grid, copies the grid into an array of 
 doubles, and determines if each cell is at risk of exceeding 50% of 
 the value of the adjacent blocks. Creates a boolean array of the same 
 size, where a 'true' cell is at risk of exceeding. If cell is on the 
 border or corner, the cell uses itself as a value for each missing 
 value.


INCLUDED FILES:

 List the files required for the project with a brief
 explanation of why each is included.

 * GridMonitor.java
    main required file - does all required work
 * GridMonitorInterface.java
    template for required methods in GridMonitor
 * GridMonitor.java
    contains main method, drives GridMonitor, and prints the 
    final danger grid - not a requirement of the program, but
    useful for debugging
 * GridMonitorTest.java
    professors preferred driver class, tests all requirements of
    the program with a pass/fail
 * README - this file
    included to demonstrate professional overview of the program
    
 * numerous test files are included in the directory to test the 
   functionality of the program

   
COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
 $ javac GridMonitorTest.java
 $ javac GridMonitorInterface.java
 $ javac GridMonitor.java

 Run the compiled class file with the command:
 $ java GridMonitorTest

 Console output will give the results after the program finishes.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 The program was created to test a grid of numbers to see if any value
 on the grid exceeded 50% of all adjacent cells.
 The original grid is read in from a file where the first line contains
 the dimension of the grid and organized into an array of doubles. The 
 average of all adjacent cells was calculated and cut in half to develop 
 an acceptable delta. The delta from the averages calculated earlier
 created a range in which the cell had to remain within for it to be
 an acceptable value. If there was a cell that did not lie within the 
 accepted range, the respective boolean cell would contain 'true'.

TESTING:

 The pre-written scripts contained a testing program (GridMonitorTest) 
 that tested for weaknesses and program requisites. 
 I also wrote an alternate driver class that displayed each intermediate
 step so that results could be visually verified.
 Between these two methods, I believe any unknown has been addressed
 within the program.


DISCUSSION:

 A few issues I had in writing the program were the throws exception 
 requirement when the constructor is originally reading the file name and
 the total encapsulation of the arrays.
    1) In 121, we were shown to conditionally accept if file.exists and
    file.isFile. If the condition was not met, a statement was simply 
    printed rather than a formal exception being thrown.
    
    The answer to this problem was found in the required textbook in 
    which a 'problem' is created, and it's exception is thrown when 
    called upon
    
    2) The total encapsulation, also, was not used in 121, and research
    revealed many theories on it's solution. The problem encountered with
    each of the solutions was still that any clones or copies of the total
    array would clone or copy the full pointer of the objects. I bypassed
    these issues by copying each array, cell by cell, so that the primitive
    double would copy the value itself and the array would be a true copy
    rather than a copy of pointers.
    
 From the warmup project, I gather that Java, Pt 2 will have a great deal
 less hand-holding than did it's predecessor, where explicit solutions to
 each and every exception will not be spoon fed.