import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

// The main game panel class. Must extend JPanel. Creates and adds sub-panels. Manages all game components and the ActionListeners
@SuppressWarnings("serial")
public class MineWalkerPanel extends JPanel{
	
	private final static int DEFAULT_FIELD_DIM = 10;
	private int dim = DEFAULT_FIELD_DIM;
	private int moves;
	private boolean minesVisible;
	private boolean pathVisible;
	private boolean newGameDisable;
	
	// Create colors
	private Color[] colors;
			
	// declare panels
	private MineFieldPanel board;
	private JPanel colorKey;
	private JPanel scoreBoard;
	private JPanel useButtons;	
	
	// declare usable buttons
	private JButton showMines = new JButton("Show Mines");
	private JButton showPath = new JButton("Show Path");
	private JButton newGame = new JButton("Give Up?");
	
	// declare color key buttons
	private JPanel zeroInd;
	private JPanel oneInd;
	private JPanel twoInd;
	private JPanel threeInd;
	private JPanel exploded;
	private JPanel blank;
	private JPanel startSquare;
	private JPanel endSquare;
	
	// declare text fields
	private JLabel gridSize = new JLabel("Grid Size: " + dim);
	private JLabel livesCount;
	private JLabel scoreCount;
	
	// declare slider
	private JSlider slider;
	
	public MineWalkerPanel() {
		
		setLayout(new BorderLayout());
		
		board = new MineFieldPanel(new SquareListener(),dim);
		colors = board.getColors();
		
		// create usable buttons panel
		useButtons = new JPanel();
		
		useButtons.add(showMines);
		showMines.addActionListener(new MineListener());
		
		useButtons.add(showPath);
		showPath.addActionListener(new PathListener());
		
		useButtons.add(newGame);
		newGame.addActionListener(new GameListener());
		
		useButtons.add(gridSize);
		
		// create color key
		colorKey = new JPanel();
		colorKey.setBorder(BorderFactory.createTitledBorder("Color Key"));
		colorKey.setLayout(new BoxLayout(colorKey, BoxLayout.Y_AXIS));
		
		zeroInd = new JPanel();
		zeroInd.setBorder(BorderFactory.createRaisedBevelBorder());
		zeroInd.add(new JLabel("0 Adjacent Mines"));
		zeroInd.setBackground(colors[0]);
		zeroInd.setPreferredSize(new Dimension(100,100));
		colorKey.add(zeroInd);
		
		oneInd = new JPanel();
		oneInd.setBorder(BorderFactory.createRaisedBevelBorder());
		oneInd.add(new JLabel("1 Adjacent Mine"));
		oneInd.setBackground(colors[1]);
		colorKey.add(oneInd);
		
		twoInd = new JPanel();
		twoInd.setBorder(BorderFactory.createRaisedBevelBorder());
		twoInd.add(new JLabel("2 Adjacent Mines"));
		twoInd.setBackground(colors[2]);
		colorKey.add(twoInd);
		
		threeInd = new JPanel();
		threeInd.setBorder(BorderFactory.createRaisedBevelBorder());
		threeInd.add(new JLabel("3 Adjacent Mines"));
		threeInd.setBackground(colors[3]);
		colorKey.add(threeInd);
		
		exploded = new JPanel();
		exploded.setBorder(BorderFactory.createRaisedBevelBorder());
		JLabel expTitle = new JLabel("Exploded Mines");
		expTitle.setForeground(Color.WHITE);
		exploded.add(expTitle);
		exploded.setBackground(colors[4]);
		colorKey.add(exploded);
		
		blank = new JPanel();
		colorKey.add(blank);
		
		startSquare = new JPanel();
		startSquare.setBorder(BorderFactory.createRaisedBevelBorder());
		startSquare.add(new JLabel("Start"));
		startSquare.setBackground(colors[5]);
		colorKey.add(startSquare);
		
		endSquare = new JPanel();
		endSquare.setBorder(BorderFactory.createRaisedBevelBorder());
		endSquare.add(new JLabel("End"));
		endSquare.setBackground(colors[6]);
		colorKey.add(endSquare);
		
		// create scoreboard
		scoreBoard = new JPanel();
		TitledBorder tb = BorderFactory.createTitledBorder("Scoreboard");
		tb.setTitleJustification(TitledBorder.RIGHT);
		scoreBoard.setBorder(tb);
		scoreBoard.setLayout(new BoxLayout(scoreBoard, BoxLayout.Y_AXIS));
		
		livesCount = new JLabel("Lives: ");
		scoreCount = new JLabel("Score: ");
		scoreBoard.add(livesCount);
		scoreBoard.add(scoreCount);
		
		slider = new JSlider(10,50,10);
		slider.setOrientation(SwingConstants.VERTICAL);
		slider.setPaintTicks(true);
		slider.setPaintLabels(true);
		slider.setMajorTickSpacing(10);
		slider.setSnapToTicks(true);
		slider.addChangeListener(new SlideListener());
		scoreBoard.add(slider);
		
		// set layout positions
		add(board, BorderLayout.CENTER);
		add(colorKey, BorderLayout.WEST);
		add(scoreBoard, BorderLayout.EAST);
		add(useButtons,BorderLayout.SOUTH);	
	}
	
	private class MineListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			if(minesVisible) {
				showMines.setText("Show Mines");
				minesVisible = false;
			}
			else {
				minesVisible = true;
				showMines.setText("Hide Mines");
			}
			
			board.setMineColor(minesVisible);
		}
		
	}
	
	private class PathListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			if(pathVisible) {
				showPath.setText("Show Path");
				pathVisible = false;
			}
			else {
				showPath.setText("Hide Path");
				pathVisible = true;
			}
			
			board.setPathColor(pathVisible);
		}
		
	}
	
	private class GameListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			if(newGameDisable) {
				newGame.setText("Give Up?");
				newGameDisable = false;
				showPath.setText("Show Path");
				pathVisible = false;
				showMines.setText("Show Mines");
				minesVisible = false;
				board.newPanel();
			}
			else {
				newGame.setText("New Game");
				newGameDisable = true;
				showPath.setText("Hide Path");
				pathVisible = true;
				showMines.setText("Hide Mines");
				minesVisible = true;
				
				board.setPathColor(pathVisible);
				board.setMineColor(minesVisible);
				moves = 0;
			}
			
		}
		
	}
	
	private class SlideListener implements ChangeListener{

		@Override
		public void stateChanged(ChangeEvent e) {
			JSlider source = (JSlider)e.getSource();
			if (!source.getValueIsAdjusting()) {
				dim = (int)source.getValue();
			}
			
		}
		
	}
	private class SquareListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			
			moves++;
		}
	}
}
