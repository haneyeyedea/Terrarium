import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class GridMonitor implements GridMonitorInterface {
	
	private double[][] baseGrid;
	private double[][] surroundingSumGrid;
	private double[][] surroundingAvgGrid;
	private double[][] deltaGrid;
	private boolean[][] dangerGrid;
	
	public GridMonitor(String filename) throws FileNotFoundException {
		int firstDim = 1;
		int secondDim = 1;
		File file = new File(filename);
		
		if(file.exists() && file.isFile()) {
			try {
				Scanner filescan = new Scanner(file);
				int gridDim;
				double number;
				int lineCount = 0;
			
				while(filescan.hasNextLine()) {
					String line = filescan.nextLine();
					Scanner numscan = new Scanner(line);
					int numCount = 0;
				
					while(numscan.hasNext()) {
						if (lineCount == 0) {
							gridDim = numscan.nextInt();
							if (numCount == 0) {
								firstDim = gridDim;
							}
							else {
								secondDim = gridDim;
								baseGrid = new double[firstDim][secondDim];
							}
						}
						else {							
							number = numscan.nextDouble();
							baseGrid[lineCount - 1][numCount] = number;
						}
						
						numCount++;
					}
				
					lineCount++;
					numscan.close();
				}
				filescan.close();
			}
			catch(FileNotFoundException e) {
				System.out.println("File not found.");
			}
		}
		calculateSurroundingSumGrid(firstDim,secondDim);
	}
	
	public void calculateSurroundingSumGrid(int firstDim, int secondDim) {
		surroundingSumGrid = new double[firstDim][secondDim];
		for(int i = 0; i < surroundingSumGrid.length; i++) {
			for(int j = 0; j < surroundingSumGrid[0].length; j++) {
				double counter = 0;
				
				if (i > 0) {counter += baseGrid[i-1][j];}
				else {counter += baseGrid[i][j];}
				
				if (i < surroundingSumGrid.length - 1) {counter += baseGrid[i+1][j];}
				else {counter += baseGrid[i][j];}
				
				if (j > 0) {counter += baseGrid[i][j-1];}
				else {counter += baseGrid[i][j];}
				
				if (j < surroundingSumGrid[0].length - 1) {counter += baseGrid[i][j+1];}
				else {counter += baseGrid[i][j];}
				
				surroundingSumGrid[i][j] = counter;
			}
		}
	}
	@Override
	public double[][] getBaseGrid() {
		return baseGrid;
	}
	@Override
	public double[][] getSurroundingSumGrid() {
		return surroundingSumGrid;
	}
	@Override
	public double[][] getSurroundingAvgGrid() {
		return surroundingAvgGrid;
	}
	@Override
	public double[][] getDeltaGrid() {
		return deltaGrid;
	}
	@Override
	public boolean[][] getDangerGrid() {
		return dangerGrid;
	}
}
